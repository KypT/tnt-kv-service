worker_rlimit_core  500M;
pid /var/run/nginx.pid;

error_log /var/log/nginx/crit.log crit;
error_log /var/log/nginx/error.log error;

worker_rlimit_nofile 400000;
worker_processes 1;

events {
  use epoll;
  worker_connections 200000;
  multi_accept on;
}

http {
  access_log off;

  client_body_buffer_size 8k;
  client_header_buffer_size 4k;
  client_max_body_size 1m;
  large_client_header_buffers 2 1k;

  keepalive_timeout 7200s;
  keepalive_requests 200000000;

  client_body_timeout 20;
  send_timeout 20;

  tcp_nopush on;
  tcp_nodelay on;

  index index.html index.htm;
  include mime.types;
  default_type application/json;

  upstream tnt {
        server kv-tnt:3301 max_fails=1 fail_timeout=60s;
        keepalive 250000;
  }

  upstream swagger-ui {
        server swagger-ui:8080;
  }

  server {
    server_name tnt-kv-service;

    listen 80 default deferred reuseport so_keepalive=on backlog=65535;

    location  /swagger-ui/ {
        proxy_pass http://swagger-ui/;
    }

    location /tnt_proxy {
        internal;
        tnt_method handle;
        tnt_buffer_size 100k;
        tnt_http_rest_methods get post put delete;
        tnt_multireturn_skip_count 1;
        tnt_pure_result on;
        tnt_pass_http_request on pass_body;
        tnt_pass tnt;
    }

      location /kv {
        default_type application/json;
        rewrite_by_lua '
       local cjson = require("cjson")

       local map = {
         GET = ngx.HTTP_GET,
         POST = ngx.HTTP_POST,
         PUT = ngx.HTTP_PUT,
         DELETE = ngx.HTTP_DELETE
       }

       ngx.req.read_body()
       local body = ngx.req.get_body_data()

       local res = ngx.location.capture("/tnt_proxy", {
         args = ngx.var.args,
         method = map[ngx.var.request_method],
         body = body
       })

       if res.status == ngx.HTTP_OK then
         local result = cjson.decode(res.body)

         if result ~= nil and result["error"] == nil then
           ngx.status = result[1]
           local body = result[2]
           if type(body) == "string" then
             ngx.header["content_type"] = "text/plain"
             ngx.print(body)
           elseif type(body) == "table" then
             local body = cjson.encode(body)
             ngx.say(body)
           else
             ngx.status = 502
             ngx.say("Unexpected response from Tarantool")
           end
         else
           ngx.status = 502
           ngx.say(res.body)
         end

         -- Finalize execution
         ngx.exit(ngx.OK)
       else
         ngx.status = res.status
         ngx.say(res.body)
       end
       ';
       }
  }
}